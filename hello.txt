void postOrder3(BinTree *root) //非递归后序遍历 {



    stack<BinTree*> s;



    BinTree *cur; //当前结点   BinTree *pre=NULL; //前一次访问的结点  



     s.push(root); 



     while(!s.empty())



    {



        cur=s.top(); if((cur->lchild==NULL&&cur->rchild==NULL)|| (pre!=NULL&&(pre==cur->lchild||pre==cur->rchild)))



        {



            cout<<cur->data<<" "; //如果当前结点没有孩子结点或者孩子节点都已被访问过  



            s.pop();



            pre=cur; 



        } else { 



                if(cur->rchild!=NULL)



                s.push(cur->rchild); 



                if(cur->lchild!=NULL)    



                s.push(cur->lchild);



        }



    }    



}



